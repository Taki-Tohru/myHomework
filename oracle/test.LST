/* 完整再现实验4第6题 */
/* 305行可以正确*/
SQL> DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4  BEGIN
  5      FOR V_I IN 1..9 LOOP
  6          CASE
  7              WHEN MOD(V_I,2) != 0 THEN
  8                  FOR V_J IN 1..V_I LOOP
  9                      DBMS_OUTPUT.PUT('*');
 10                  END LOOP;
 11              ELSE
 12                  DBMS_OUTPUT.PUT(CHR(13));
 13          END CASE;
 14          DBMS_OUTPUT.PUT_LINE(' ');
 15      END LOOP;
 16  END;
 17  /
*                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           
***                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                           
*****                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                           
*******                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                           
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4  BEGIN
  5      FOR V_I IN 1..9 LOOP
  6          CASE
  7              WHEN MOD(V_I,2) != 0 THEN
  8                  FOR V_J IN 1..V_I LOOP
  9                      DBMS_OUTPUT.PUT_LINE('*');
 10                  END LOOP;
 11              ELSE
 12                  DBMS_OUTPUT.PUT_LINE(CHR(13));
 13          END CASE;
 14          DBMS_OUTPUT.PUT_LINE(' ');
 15      END LOOP;
 16* END;
SQL> /
*                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           
*                                                                                                                                                                                                                                                                                                           

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4  BEGIN
  5      FOR V_I IN 1..9 LOOP
  6          CASE
  7              WHEN MOD(V_I,2) != 0 THEN
  8                  FOR V_J IN 1..V_I LOOP
  9                      DBMS_OUTPUT.PUT('*');
 10                  END LOOP;
 11              ELSE
 12                  DBMS_OUTPUT.PUT(CHR(32));
 13          END CASE;
 14          DBMS_OUTPUT.PUT_LINE(' ');
 15      END LOOP;
 16* END;
SQL> /
*                                                                                                                                                                                                                                                                                                           
***                                                                                                                                                                                                                                                                                                         
*****                                                                                                                                                                                                                                                                                                       
*******                                                                                                                                                                                                                                                                                                     
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> SELECT MOD(9,2) FORM DUAL;
SELECT MOD(9,2) FORM DUAL
                     *
第 1 行出现错误: 
ORA-00923: 未找到要求的 FROM 关键字 


SQL> SELECT MOD(9,2) FORM DAUL;
SELECT MOD(9,2) FORM DAUL
                     *
第 1 行出现错误: 
ORA-00923: 未找到要求的 FROM 关键字 


SQL> SELECT MOD(9,2) FROM DAUL;
SELECT MOD(9,2) FROM DAUL
                     *
第 1 行出现错误: 
ORA-00942: 表或视图不存在 


SQL> SELECT MOD(9,2) FROM DUAL;

  MOD(9,2)                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
         1                                                                                                                                                                                                                                                                                                  

SQL> SELECT 9/2 FROM DUAL;

       9/2                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
       4.5                                                                                                                                                                                                                                                                                                  

SQL> SELECT INT(9/2) FROM DUAL;
SELECT INT(9/2) FROM DUAL
       *
第 1 行出现错误: 
ORA-00904: "INT": 标识符无效 


SQL> SELECT CEIL(9/2) FROM DUAL;

 CEIL(9/2)                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
         5                                                                                                                                                                                                                                                                                                  

SQL> SELECT FLOOR(9/2) FROM DUAL;

FLOOR(9/2)                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
         4                                                                                                                                                                                                                                                                                                  

SQL> SELECT FLOOR(8/2) FROM DUAL;

FLOOR(8/2)                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
         4                                                                                                                                                                                                                                                                                                  

SQL> SELECT FLOOR(1/2) FROM DUAL;

FLOOR(1/2)                                                                                                                                                                                                                                                                                                  
----------                                                                                                                                                                                                                                                                                                  
         0                                                                                                                                                                                                                                                                                                  

SQL> DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_J IN 1..V_I LOOP
 10                      FOR V_K IN REVERSE FLOOR(9/2)-FLOOR(V_I/2) LOOP
 11                          DBMS_OUTPUT.PUT('1');
 12                      END LOOP;
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20  END;
 21  /
                    FOR V_K IN REVERSE FLOOR(9/2)-FLOOR(V_I/2) LOOP
                                                               *
第 10 行出现错误: 
ORA-06550: 第 10 行, 第 64 列: 
PLS-00103: 出现符号 "LOOP"在需要下列之一时： 
. ( * % & - + / at mod 
remainder rem .. <an exponent (**)> ||
ORA-06550: 第 12 行, 第 21 列: 
PLS-00103: 出现符号 "END"在需要下列之一时： 
begin function pragma 
procedure subtype type <an identifier> 
<a double-quoted delimited-identifier> current cursor delete 
exists prior 


SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_J IN 1..V_I LOOP
 10                      FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 11                          DBMS_OUTPUT.PUT('1');
 12                      END LOOP;
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20* END;
SQL> /
1111*                                                                                                                                                                                                                                                                                                       
111*111*111*                                                                                                                                                                                                                                                                                                
11*11*11*11*11*                                                                                                                                                                                                                                                                                             
1*1*1*1*1*1*1*                                                                                                                                                                                                                                                                                              
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_J IN 1..V_I LOOP
 10                      FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 11                          DBMS_OUTPUT.PUT('1');
 12                          DBMS_OUTPUT.PUT('*');
 13                      END LOOP;
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20* END;
SQL> /
1*1*1*1*                                                                                                                                                                                                                                                                                                    
1*1*1*1*1*1*1*1*1*                                                                                                                                                                                                                                                                                          
1*1*1*1*1*1*1*1*1*1*                                                                                                                                                                                                                                                                                        
1*1*1*1*1*1*1*                                                                                                                                                                                                                                                                                              

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_J IN 1..V_I LOOP
 10                      FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 11                          DBMS_OUTPUT.PUT('1');
 12                      END LOOP;
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20* END;
SQL> /
1111*                                                                                                                                                                                                                                                                                                       
111*111*111*                                                                                                                                                                                                                                                                                                
11*11*11*11*11*                                                                                                                                                                                                                                                                                             
1*1*1*1*1*1*1*                                                                                                                                                                                                                                                                                              
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 10                      DBMS_OUTPUT.PUT('1');
 11                  END LOOP;
 12                  FOR V_J IN 1..V_I LOOP
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20* END;
SQL> /
1111*                                                                                                                                                                                                                                                                                                       
111***                                                                                                                                                                                                                                                                                                      
11*****                                                                                                                                                                                                                                                                                                     
1*******                                                                                                                                                                                                                                                                                                    
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 10                      DBMS_OUTPUT.PUT(' ');
 11                  END LOOP;
 12                  FOR V_J IN 1..V_I LOOP
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20* END;
SQL> /
*                                                                                                                                                                                                                                                                                                           
***                                                                                                                                                                                                                                                                                                         
*****                                                                                                                                                                                                                                                                                                       
*******                                                                                                                                                                                                                                                                                                     
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> ED
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 10                      DBMS_OUTPUT.PUT(CHR(32));
 11                  END LOOP;
 12                  FOR V_J IN 1..V_I LOOP
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT(' ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE(' ');
 19      END LOOP;
 20* END;
SQL> /
*                                                                                                                                                                                                                                                                                                           
***                                                                                                                                                                                                                                                                                                         
*****                                                                                                                                                                                                                                                                                                       
*******                                                                                                                                                                                                                                                                                                     
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL> eD
已写入 file afiedt.buf

  1  DECLARE
  2      V_I INT :=1;
  3      V_J INT;
  4      V_K INT;
  5  BEGIN
  6      FOR V_I IN 1..9 LOOP
  7          CASE
  8              WHEN MOD(V_I,2) != 0 THEN
  9                  FOR V_K IN REVERSE 1..FLOOR(9/2)-FLOOR(V_I/2) LOOP
 10                      DBMS_OUTPUT.PUT(CHR(32));
 11                  END LOOP;
 12                  FOR V_J IN 1..V_I LOOP
 13                      DBMS_OUTPUT.PUT('*');
 14                  END LOOP;
 15                  ELSE
 16                      DBMS_OUTPUT.PUT('        ');
 17          END CASE;
 18          DBMS_OUTPUT.PUT_LINE('      ');
 19      END LOOP;
 20* END;
SQL> /
*                                                                                                                                                                                                                                                                                                           
***                                                                                                                                                                                                                                                                                                         
*****                                                                                                                                                                                                                                                                                                       
*******                                                                                                                                                                                                                                                                                                     
*********                                                                                                                                                                                                                                                                                                   

PL/SQL 过程已成功完成。

SQL>   CREATE OR REPLACE PROCEDURE UPDATE_DEPT
  2    (
  3        V_DNAME DEPT.DNAME%TYPE,
  4        V_NEW DEPT.DNAME%TYPE
  5    )
  6    IS
  7        V_TEMP DEPT.DNAME%TYPE;
  8    BEGIN
  9        SELECT DNAME INTO V_TEMP FROM DEPT WHERE DNAME=V_DNAME;
 10        UPDATE DEPT
 11        SET DNAME=V_NEW
 12        WHERE DNAME=V_DNAME;
 13        DBMS_OUTPUT.PUT_LINE('修改成功');
 14    EXCEPTION
 15    WHEN NO_DATA_FOUND THEN
 16        DBMS_OUTPUT.PUT_LINE('部门号不存在！');
 17    END UPDATE_DEPT;
 18  /

过程已创建。

SQL> ed
已写入 file afiedt.buf

  1    CREATE OR REPLACE PROCEDURE UPDATE_DEPT
  2    (
  3        V_DEPTNO DEPT.DEPTNO%TYPE,
  4        V_NEW DEPT.DNAME%TYPE
  5    )
  6    IS
  7        V_TEMP DEPT.DNAME%TYPE;
  8    BEGIN
  9        SELECT DNAME INTO V_TEMP FROM DEPT WHERE DEPTNO=V_DEPTNO;
 10        UPDATE DEPT
 11        SET DNAME=V_NEW
 12        WHERE DEPTNO=V_DEPTNO;
 13        DBMS_OUTPUT.PUT_LINE('修改成功');
 14    EXCEPTION
 15    WHEN NO_DATA_FOUND THEN
 16        DBMS_OUTPUT.PUT_LINE('部门号不存在！');
 17*   END UPDATE_DEPT;
SQL> /

过程已创建。

SQL> SELECT * FROM DEPT;

    DEPTNO DNAME          LOC                                                                                                                                                                                                                                                                               
---------- -------------- -------------                                                                                                                                                                                                                                                                     
        10 ACCOUNTING     NEW YORK                                                                                                                                                                                                                                                                          
        20 RESEARCH       DALLAS                                                                                                                                                                                                                                                                            
        30 SALES          CHICAGO                                                                                                                                                                                                                                                                           
        40 OPERATIONS     BOSTON                                                                                                                                                                                                                                                                            

SQL> INSERT INTO DEPT (DEPTNO,DNAME) VALUES
  2  (50,'PRINT');

已创建 1 行。

SQL> EXECUTE UPDATE_DEPT(50,'PRINTER');
修改成功                                                                                                                                                                                                                                                                                                    

PL/SQL 过程已成功完成。

SQL> SELECT * FROM DEPT;

    DEPTNO DNAME          LOC                                                                                                                                                                                                                                                                               
---------- -------------- -------------                                                                                                                                                                                                                                                                     
        50 PRINTER                                                                                                                                                                                                                                                                                          
        10 ACCOUNTING     NEW YORK                                                                                                                                                                                                                                                                          
        20 RESEARCH       DALLAS                                                                                                                                                                                                                                                                            
        30 SALES          CHICAGO                                                                                                                                                                                                                                                                           
        40 OPERATIONS     BOSTON                                                                                                                                                                                                                                                                            

SQL> EXECUTE UPDATE_DEPT(50,'PRINT');
修改成功                                                                                                                                                                                                                                                                                                    

PL/SQL 过程已成功完成。

SQL> SELECT * FROM DEPT;

    DEPTNO DNAME          LOC                                                                                                                                                                                                                                                                               
---------- -------------- -------------                                                                                                                                                                                                                                                                     
        50 PRINT                                                                                                                                                                                                                                                                                            
        10 ACCOUNTING     NEW YORK                                                                                                                                                                                                                                                                          
        20 RESEARCH       DALLAS                                                                                                                                                                                                                                                                            
        30 SALES          CHICAGO                                                                                                                                                                                                                                                                           
        40 OPERATIONS     BOSTON                                                                                                                                                                                                                                                                            

SQL> CREATE OR REPLACE FUNCTION DEPT_FUN(
  2          V_TEMP IN VARCHAR
  3      )
  4      RETURN BOOLEAN
  5      IS
  6      V_DEPTNO DEPT.DEPTNO%TYPE;
  7      BEGIN
  8          SELECT DEPTNO INTO V_DEPTNO
  9          FROM DEPT
 10         WHERE DEPTNO=V_TEMP;
 11         RETURN TRUE;
 12     EXCEPTION
 13         WHEN NO_DATA_FOUND THEN
 14             RETURN FALSE;
 15     END DEPT_FUN;
 16  /

函数已创建。

SQL> BEGIN
  2       IF DEPT_FUN(100)=TRUE THEN
  3           DBMS_OUTPUT.PUT_LINE('部门存在');
  4       ELSE
  5           DBMS_OUTPUT.PUT_LINE('部门不存在');
  6       END IF;
  7   END;
  8  /
部门不存在                                                                                                                                                                                                                                                                                                  

PL/SQL 过程已成功完成。

SQL> ed
已写入 file afiedt.buf

  1  BEGIN
  2       IF DEPT_FUN(50)=TRUE THEN
  3           DBMS_OUTPUT.PUT_LINE('部门存在');
  4       ELSE
  5           DBMS_OUTPUT.PUT_LINE('部门不存在');
  6       END IF;
  7*  END;
SQL> /
部门存在                                                                                                                                                                                                                                                                                                    

PL/SQL 过程已成功完成。

SQL> SELECT * FROM EMP;

     EMPNO ENAME      JOB              MGR HIREDATE              SAL       COMM     DEPTNO                                                                                                                                                                                                                  
---------- ---------- --------- ---------- -------------- ---------- ---------- ----------                                                                                                                                                                                                                  
      7369 SMITH      CLERK           7902 17-12月-80            920                    20                                                                                                                                                                                                                  
      7499 ALLEN      SALESMAN        7698 20-2月 -81           1680        300         30                                                                                                                                                                                                                  
      7521 WARD       SALESMAN        7698 22-2月 -81           1375        500         30                                                                                                                                                                                                                  
      7566 JONES      MANAGER         7839 02-4月 -81        3123.75                    20                                                                                                                                                                                                                  
      7654 MARTIN     SALESMAN        7698 28-9月 -81           1375       1400         30                                                                                                                                                                                                                  
      7698 BLAKE      MANAGER         7839 01-5月 -81         2992.5                    30                                                                                                                                                                                                                  
      7782 CLARK      MANAGER         7839 09-6月 -81         2572.5                    10                                                                                                                                                                                                                  
      7788 SCOTT      ANALYST         7566 19-4月 -87           3000                    20                                                                                                                                                                                                                  
      7839 KING       PRESIDENT            17-11月-81           5000                    10                                                                                                                                                                                                                  
      7844 TURNER     SALESMAN        7698 08-9月 -81           1575          0         30                                                                                                                                                                                                                  
      7876 ADAMS      CLERK           7788 23-5月 -87           1210                    20                                                                                                                                                                                                                  
      7900 JAMES      CLERK           7698 03-12月-81         1092.5                    30                                                                                                                                                                                                                  
      7902 FORD       ANALYST         7566 03-12月-81           3000                    20                                                                                                                                                                                                                  
      7934 MILLER     CLERK           7782 23-1月 -82           1430                    10                                                                                                                                                                                                                  

已选择14行。

SQL> CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNAME DEPT.DNAME%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15  AS
 16  BEGIN
 17      SELECT DNAME INTO V_DNAME FROM DEPT WHERE DEPTNO=V_DEPTNO;
 18      CASE
 19      WHEN DEPT_FUN(V_DEPTNO)=TRUE THEN
 20          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 21          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 22          DBMS_OUTPUT.PUT_LINE('插入成功');
 23      WHEN DEPT_FUN(V_DEPTNO)=FALSE THEN
 24          RAISE E_NO_DEPTNO;
 25      END CASE;
 26      EXCEPTION
 27      WHEN E_NO_DEPTNO THEN
 28          RAISE_APPLICATION_ERROR('插入的部门号不存在');
 29  END;
 30  /

警告: 创建的过程带有编译错误。

SQL> show error
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
15/1     PLS-00103: 出现符号 "AS"在需要下列之一时：                                                                                                                                                                                                                                                         
         begin function pragma                                                                                                                                                                                                                                                                              
         procedure subtype type <an identifier>                                                                                                                                                                                                                                                             
         <a double-quoted delimited-identifier> current cursor delete                                                                                                                                                                                                                                       
         exists prior                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                            
29/4     PLS-00103: 出现符号 "end-of-file"在需要下列之一时：                                                                                                                                                                                                                                                
         begin function                                                                                                                                                                                                                                                                                     
         pragma procedure                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                            
SQL> ed
已写入 file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNAME DEPT.DNAME%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15      PRAGMA EXCEPTION_INIT(E_NO_DEPTNO,-2292);
 16  AS
 17  BEGIN
 18      SELECT DNAME INTO V_DNAME FROM DEPT WHERE DEPTNO=V_DEPTNO;
 19      CASE
 20      WHEN DEPT_FUN(V_DEPTNO)=TRUE THEN
 21          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 22          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 23          DBMS_OUTPUT.PUT_LINE('插入成功');
 24      WHEN DEPT_FUN(V_DEPTNO)=FALSE THEN
 25          RAISE E_NO_DEPTNO;
 26      END CASE;
 27      EXCEPTION
 28      WHEN E_NO_DEPTNO THEN
 29          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 30* END;
SQL> /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR;
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
16/1     PLS-00103: 出现符号 "AS"在需要下列之一时：                                                                                                                                                                                                                                                         
         begin function pragma                                                                                                                                                                                                                                                                              
         procedure subtype type <an identifier>                                                                                                                                                                                                                                                             
         <a double-quoted delimited-identifier> current cursor delete                                                                                                                                                                                                                                       
         exists prior                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                            
30/4     PLS-00103: 出现符号 "end-of-file"在需要下列之一时：                                                                                                                                                                                                                                                
         begin function                                                                                                                                                                                                                                                                                     
         pragma procedure                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNAME DEPT.DNAME%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15      PRAGMA EXCEPTION_INIT(E_NO_DEPTNO,-2292);
 16  BEGIN
 17      SELECT DNAME INTO V_DNAME FROM DEPT WHERE DEPTNO=V_DEPTNO;
 18      CASE
 19      WHEN DEPT_FUN(V_DEPTNO)=TRUE THEN
 20          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 21          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 22          DBMS_OUTPUT.PUT_LINE('插入成功');
 23      WHEN DEPT_FUN(V_DEPTNO)=FALSE THEN
 24          RAISE E_NO_DEPTNO;
 25      END CASE;
 26      EXCEPTION
 27      WHEN E_NO_DEPTNO THEN
 28          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 29* END;
 30  /

过程已创建。

SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>70);
BEGIN ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>70); END;

*
第 1 行出现错误: 
ORA-01403: 未找到任何数据
ORA-06512: 在 "SCOTT.ADD_EMP", line 17
ORA-06512: 在 line 1 


SQL> CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNO DEPT.DNO%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15  AS
 16  BEGIN
 17      SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 18      CASE
 19      WHEN DEPT_FUN(V_DNO)=TRUE THEN
 20          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 21          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 22          DBMS_OUTPUT.PUT_LINE('插入成功');
 23      ELSE
 24          RAISE E_NO_DEPTNO;
 25      END CASE;
 26      EXCEPTION
 27      WHEN E_NO_DEPTNO THEN
 28          RAISE_APPLICATION_ERROR('插入的部门号不存在');
 29  END;
 30  /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
15/1     PLS-00103: 出现符号 "AS"在需要下列之一时：                                                                                                                                                                                                                                                         
         begin function pragma                                                                                                                                                                                                                                                                              
         procedure subtype type <an identifier>                                                                                                                                                                                                                                                             
         <a double-quoted delimited-identifier> current cursor delete                                                                                                                                                                                                                                       
         exists prior                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                            
29/4     PLS-00103: 出现符号 "end-of-file"在需要下列之一时：                                                                                                                                                                                                                                                
         begin function                                                                                                                                                                                                                                                                                     
         pragma procedure                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNO DEPT.DNO%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15  BEGIN
 16      SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 17      CASE
 18      WHEN DEPT_FUN(V_DNO)=TRUE THEN
 19          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 20          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 21          DBMS_OUTPUT.PUT_LINE('插入成功');
 22      ELSE
 23          RAISE E_NO_DEPTNO;
 24      END CASE;
 25      EXCEPTION
 26      WHEN E_NO_DEPTNO THEN
 27          RAISE_APPLICATION_ERROR('插入的部门号不存在');
 28* END;
 29  /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR;
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
13/11    PL/SQL: Item ignored                                                                                                                                                                                                                                                                               
13/16    PLS-00302: 必须声明 'DNO' 组件                                                                                                                                                                                                                                                                     
16/5     PL/SQL: SQL Statement ignored                                                                                                                                                                                                                                                                      
16/24    PLS-00320: 此表达式的类型声明不完整或格式不正确                                                                                                                                                                                                                                                    
16/30    PL/SQL: ORA-00904: : 标识符无效                                                                                                                                                                                                                                                                    
17/5     PL/SQL: Statement ignored                                                                                                                                                                                                                                                                          
18/19    PLS-00320: 此表达式的类型声明不完整或格式不正确                                                                                                                                                                                                                                                    
27/9     PL/SQL: Statement ignored                                                                                                                                                                                                                                                                          
27/9     PLS-00306: 调用 'RAISE_APPLICATION_ERROR' 时参数个数或类型错误                                                                                                                                                                                                                                     
SQL> ED
已写入 file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNO DEPT.DEPTNO%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15  BEGIN
 16      SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 17      CASE
 18      WHEN DEPT_FUN(V_DNO)=TRUE THEN
 19          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 20          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 21          DBMS_OUTPUT.PUT_LINE('插入成功');
 22      ELSE
 23          RAISE E_NO_DEPTNO;
 24      END CASE;
 25      EXCEPTION
 26      WHEN E_NO_DEPTNO THEN
 27          RAISE_APPLICATION_ERROR('插入的部门号不存在');
 28* END;
SQL> /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
27/9     PL/SQL: Statement ignored                                                                                                                                                                                                                                                                          
27/9     PLS-00306: 调用 'RAISE_APPLICATION_ERROR' 时参数个数或类型错误                                                                                                                                                                                                                                     
SQL> ED
已写入 file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      V_DNO DEPT.DEPTNO%TYPE;
 14      E_NO_DEPTNO EXCEPTION;
 15  BEGIN
 16      SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 17      CASE
 18      WHEN DEPT_FUN(V_DNO)=TRUE THEN
 19          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 20          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 21          DBMS_OUTPUT.PUT_LINE('插入成功');
 22      ELSE
 23          RAISE E_NO_DEPTNO;
 24      END CASE;
 25      EXCEPTION
 26      WHEN E_NO_DEPTNO THEN
 27          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 28* END;
SQL> /

过程已创建。

SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>70);
BEGIN ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>70); END;

*
第 1 行出现错误: 
ORA-01403: 未找到任何数据
ORA-06512: 在 "SCOTT.ADD_EMP", line 16
ORA-06512: 在 line 1 


SQL>  CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14       E_NO_DEPTNO EXCEPTION;
 15   BEGIN
 16       SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 17       INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 18       VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 19       DBMS_OUTPUT.PUT_LINE('插入成功');
 20       EXCEPTION
 21       WHEN DEPT_FUN(V_DNO)=FALSE THEN
 22           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 23   END;
 24  /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
21/19    PLS-00103: 出现符号 "("在需要下列之一时：                                                                                                                                                                                                                                                          
         . then or                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                            
21/33    PLS-00103: 出现符号 "THEN"在需要下列之一时：                                                                                                                                                                                                                                                       
         . ( ) , * @ % & - + / at                                                                                                                                                                                                                                                                           
         mod remainder rem <an exponent (**)> and or || multiset                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                            
23/5     PLS-00103: 出现符号 "end-of-file"在需要下列之一时：                                                                                                                                                                                                                                                
         end not pragma                                                                                                                                                                                                                                                                                     
         final instantiable order overriding static member constructor                                                                                                                                                                                                                                      
         map                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1   CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14       E_NO_DEPTNO EXCEPTION;
 15   BEGIN
 16       SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 17       INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 18       VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 19       DBMS_OUTPUT.PUT_LINE('插入成功');
 20       EXCEPTION
 21       WHEN DEPT_FUN(V_DNO)==FALSE THEN
 22           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 23*  END;
SQL> /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
21/19    PLS-00103: 出现符号 "("在需要下列之一时：                                                                                                                                                                                                                                                          
         . then or                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1   CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14   BEGIN
 15       SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 16       INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 17       VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 18       DBMS_OUTPUT.PUT_LINE('插入成功');
 19       EXCEPTION
 20       WHEN DEPT_FUN(V_DNO)==FALSE THEN
 21           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 22*  END;
SQL> /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR;
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
20/19    PLS-00103: 出现符号 "("在需要下列之一时：                                                                                                                                                                                                                                                          
         . then or                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1   CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14   BEGIN
 15       SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 16       INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 17       VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 18       DBMS_OUTPUT.PUT_LINE('插入成功');
 19       EXCEPTION
 20       WHEN (DEPT_FUN(V_DNO)==FALSE) THEN
 21           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 22*  END;
SQL> /

警告: 创建的过程带有编译错误。

SQL>  CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14       E_NO_DEPTNO EXCEPTION;
 15   BEGIN
 16       --SELECT DEPTNO INTO V_DNO FROM DEPT WHERE DEPTNO=V_DEPTNO;
 17       CASE
 18       WHEN DEPT_FUN(V_DNO) ==TRUE THEN
 19           INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 20           VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 21           DBMS_OUTPUT.PUT_LINE('插入成功');
 22       ELSE
 23           RAISE E_NO_DEPTNO;
 24       END CASE;
 25       EXCEPTION
 26       WHEN E_NO_DEPTNO THEN
 27           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 28   END;
 29  /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
18/28    PLS-00103: 出现符号 "="在需要下列之一时：                                                                                                                                                                                                                                                          
         ( - + all case mod new null                                                                                                                                                                                                                                                                        
         <an identifier> <a double-quoted delimited-identifier>                                                                                                                                                                                                                                             
         <a bind variable> continue any avg count current max min                                                                                                                                                                                                                                           
         prior some sql stddev sum variance execute forall merge time                                                                                                                                                                                                                                       
         timestamp interval date                                                                                                                                                                                                                                                                            
         <a string literal with character set specification>                                                                                                                                                                                                                                                
         <a number> <a single-quoted SQL string> pipe                                                                                                                                                                                                                                                       
         <一个带有字符集说明的可带引号的字符串文字>                                                                                                                                                                                                                                                         
         <一个可带引号的 SQL 字符串> purge                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1   CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14       E_NO_DEPTNO EXCEPTION;
 15   BEGIN
 16       CASE
 17       WHEN DEPT_FUN(V_DNO) ==TRUE THEN
 18           INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 19           VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 20           DBMS_OUTPUT.PUT_LINE('插入成功');
 21       ELSE
 22           RAISE E_NO_DEPTNO;
 23       END CASE;
 24       EXCEPTION
 25       WHEN E_NO_DEPTNO THEN
 26           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 27*  END;
SQL> /

警告: 创建的过程带有编译错误。

SQL> SHOW ERROR;
PROCEDURE ADD_EMP 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
17/28    PLS-00103: 出现符号 "="在需要下列之一时：                                                                                                                                                                                                                                                          
         ( - + all case mod new null                                                                                                                                                                                                                                                                        
         <an identifier> <a double-quoted delimited-identifier>                                                                                                                                                                                                                                             
         <a bind variable> continue any avg count current max min                                                                                                                                                                                                                                           
         prior some sql stddev sum variance execute forall merge time                                                                                                                                                                                                                                       
         timestamp interval date                                                                                                                                                                                                                                                                            
         <a string literal with character set specification>                                                                                                                                                                                                                                                
         <a number> <a single-quoted SQL string> pipe                                                                                                                                                                                                                                                       
         <一个带有字符集说明的可带引号的字符串文字>                                                                                                                                                                                                                                                         
         <一个可带引号的 SQL 字符串> purge                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                            
SQL> ED
已写入 file afiedt.buf

  1   CREATE OR REPLACE PROCEDURE ADD_EMP
  2   (
  3       V_EMPNO IN EMP.EMPNO%TYPE,
  4       V_ENAME IN EMP.ENAME%TYPE,
  5       V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6       V_MGR IN EMP.MGR%TYPE := 7698,
  7       V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8       V_SAL IN EMP.SAL%TYPE := 1500,
  9       V_COMM IN EMP.COMM%TYPE := 0,
 10       V_DEPTNO IN EMP.DEPTNO%TYPE
 11   )
 12   IS
 13       V_DNO DEPT.DEPTNO%TYPE;
 14       E_NO_DEPTNO EXCEPTION;
 15   BEGIN
 16       CASE
 17       WHEN DEPT_FUN(V_DNO) =TRUE THEN
 18           INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 19           VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 20           DBMS_OUTPUT.PUT_LINE('插入成功');
 21       ELSE
 22           RAISE E_NO_DEPTNO;
 23       END CASE;
 24       EXCEPTION
 25       WHEN E_NO_DEPTNO THEN
 26           DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 27*  END;
SQL> /

过程已创建。

SQL>  EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>70);
插入的部门号不存在                                                                                                                                                                                                                                                                                          

PL/SQL 过程已成功完成。

SQL>  EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>50);
插入的部门号不存在                                                                                                                                                                                                                                                                                          

PL/SQL 过程已成功完成。

SQL> SELECT * FROM DEPT;

    DEPTNO DNAME          LOC                                                                                                                                                                                                                                                                               
---------- -------------- -------------                                                                                                                                                                                                                                                                     
        50 PRINT                                                                                                                                                                                                                                                                                            
        10 ACCOUNTING     NEW YORK                                                                                                                                                                                                                                                                          
        20 RESEARCH       DALLAS                                                                                                                                                                                                                                                                            
        30 SALES          CHICAGO                                                                                                                                                                                                                                                                           
        40 OPERATIONS     BOSTON                                                                                                                                                                                                                                                                            

SQL> CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      E_NO_DEPTNO EXCEPTION;
 14  BEGIN
 15      CASE
 16      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 17          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 18          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 19          DBMS_OUTPUT.PUT_LINE('插入成功');
 20      ELSE
 21          RAISE E_NO_DEPTNO;
 22      END CASE;
 23      EXCEPTION
 24      WHEN E_NO_DEPTNO THEN
 25          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 26  END;
 27  /

过程已创建。

SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>50);
插入成功                                                                                                                                                                                                                                                                                                    

PL/SQL 过程已成功完成。

SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>100);
插入的部门号不存在                                                                                                                                                                                                                                                                                          

PL/SQL 过程已成功完成。

SQL> SELECT * FROM EMP
  2  ;

     EMPNO ENAME      JOB              MGR HIREDATE              SAL       COMM     DEPTNO                                                                                                                                                                                                                  
---------- ---------- --------- ---------- -------------- ---------- ---------- ----------                                                                                                                                                                                                                  
      9000 JOB                                                                          50                                                                                                                                                                                                                  
      7369 SMITH      CLERK           7902 17-12月-80            920                    20                                                                                                                                                                                                                  
      7499 ALLEN      SALESMAN        7698 20-2月 -81           1680        300         30                                                                                                                                                                                                                  
      7521 WARD       SALESMAN        7698 22-2月 -81           1375        500         30                                                                                                                                                                                                                  
      7566 JONES      MANAGER         7839 02-4月 -81        3123.75                    20                                                                                                                                                                                                                  
      7654 MARTIN     SALESMAN        7698 28-9月 -81           1375       1400         30                                                                                                                                                                                                                  
      7698 BLAKE      MANAGER         7839 01-5月 -81         2992.5                    30                                                                                                                                                                                                                  
      7782 CLARK      MANAGER         7839 09-6月 -81         2572.5                    10                                                                                                                                                                                                                  
      7788 SCOTT      ANALYST         7566 19-4月 -87           3000                    20                                                                                                                                                                                                                  
      7839 KING       PRESIDENT            17-11月-81           5000                    10                                                                                                                                                                                                                  
      7844 TURNER     SALESMAN        7698 08-9月 -81           1575          0         30                                                                                                                                                                                                                  
      7876 ADAMS      CLERK           7788 23-5月 -87           1210                    20                                                                                                                                                                                                                  
      7900 JAMES      CLERK           7698 03-12月-81         1092.5                    30                                                                                                                                                                                                                  
      7902 FORD       ANALYST         7566 03-12月-81           3000                    20                                                                                                                                                                                                                  
      7934 MILLER     CLERK           7782 23-1月 -82           1430                    10                                                                                                                                                                                                                  

已选择15行。

SQL> CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE := 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE := 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE := '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE := 1500,
  9      V_COMM IN EMP.COMM%TYPE := 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      E_NO_DEPTNO EXCEPTION;
 14  BEGIN
 15      CASE
 16      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 17          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 18          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 19          DBMS_OUTPUT.PUT_LINE('插入成功');
 20      ELSE
 21          RAISE E_NO_DEPTNO;
 22      END CASE;
 23      EXCEPTION
 24      WHEN E_NO_DEPTNO THEN
 25          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 26  END;
 27  /

过程已创建。

SQL> ED
已写入 file afiedt.buf

  1  CREATE OR REPLACE PROCEDURE ADD_EMP
  2  (
  3      V_EMPNO IN EMP.EMPNO%TYPE,
  4      V_ENAME IN EMP.ENAME%TYPE,
  5      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
  6      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
  7      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
  8      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
  9      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 10      V_DEPTNO IN EMP.DEPTNO%TYPE
 11  )
 12  IS
 13      E_NO_DEPTNO EXCEPTION;
 14  BEGIN
 15      CASE
 16      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 17          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 18          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 19          DBMS_OUTPUT.PUT_LINE('插入成功');
 20      ELSE
 21          RAISE E_NO_DEPTNO;
 22      END CASE;
 23      EXCEPTION
 24      WHEN E_NO_DEPTNO THEN
 25          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 26* END;
SQL> /

过程已创建。

SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>50);
BEGIN ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>50); END;

*
第 1 行出现错误: 
ORA-00001: 违反唯一约束条件 (SCOTT.PK_EMP)
ORA-06512: 在 "SCOTT.ADD_EMP", line 17
ORA-06512: 在 line 1 


SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>60);
插入的部门号不存在                                                                                                                                                                                                                                                                                          

PL/SQL 过程已成功完成。

SQL> EXECUTE ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>40);
BEGIN ADD_EMP(V_EMPNO=>9000,V_ENAME=>'JOB',V_DEPTNO=>40); END;

*
第 1 行出现错误: 
ORA-00001: 违反唯一约束条件 (SCOTT.PK_EMP)
ORA-06512: 在 "SCOTT.ADD_EMP", line 17
ORA-06512: 在 line 1 


SQL> EXECUTE ADD_EMP(V_EMPNO=>9001,V_ENAME=>'JOB',V_DEPTNO=>50);
插入成功                                                                                                                                                                                                                                                                                                    

PL/SQL 过程已成功完成。

SQL> SELECT * FROM EMP;

     EMPNO ENAME      JOB              MGR HIREDATE              SAL       COMM     DEPTNO                                                                                                                                                                                                                  
---------- ---------- --------- ---------- -------------- ---------- ---------- ----------                                                                                                                                                                                                                  
      9000 JOB                                                                          50                                                                                                                                                                                                                  
      9001 JOB                                                                          50                                                                                                                                                                                                                  
      7369 SMITH      CLERK           7902 17-12月-80            920                    20                                                                                                                                                                                                                  
      7499 ALLEN      SALESMAN        7698 20-2月 -81           1680        300         30                                                                                                                                                                                                                  
      7521 WARD       SALESMAN        7698 22-2月 -81           1375        500         30                                                                                                                                                                                                                  
      7566 JONES      MANAGER         7839 02-4月 -81        3123.75                    20                                                                                                                                                                                                                  
      7654 MARTIN     SALESMAN        7698 28-9月 -81           1375       1400         30                                                                                                                                                                                                                  
      7698 BLAKE      MANAGER         7839 01-5月 -81         2992.5                    30                                                                                                                                                                                                                  
      7782 CLARK      MANAGER         7839 09-6月 -81         2572.5                    10                                                                                                                                                                                                                  
      7788 SCOTT      ANALYST         7566 19-4月 -87           3000                    20                                                                                                                                                                                                                  
      7839 KING       PRESIDENT            17-11月-81           5000                    10                                                                                                                                                                                                                  
      7844 TURNER     SALESMAN        7698 08-9月 -81           1575          0         30                                                                                                                                                                                                                  
      7876 ADAMS      CLERK           7788 23-5月 -87           1210                    20                                                                                                                                                                                                                  
      7900 JAMES      CLERK           7698 03-12月-81         1092.5                    30                                                                                                                                                                                                                  
      7902 FORD       ANALYST         7566 03-12月-81           3000                    20                                                                                                                                                                                                                  
      7934 MILLER     CLERK           7782 23-1月 -82           1430                    10                                                                                                                                                                                                                  

已选择16行。

SQL> CREATE OR REPLACE PACKAGE BODY EMP_DEPT_PACK IS
  2  
  3      PROCEDURE INSERT_DEPT
  4     (
  5         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  6         V_DNAME IN DEPT.DNAME%TYPE
  7     )
  8     AS
  9     BEGIN
 10         INSERT INTO DEPT(DEPTNO,DNAME)
 11         VALUES(V_DEPTNO,V_DNAME);
 12    EXCEPTION
 13    WHEN DUP_VAL_ON_INDEX THEN
 14        DBMS_OUTPUT.PUT_LINE('部门号不可重复！');
 15    END INSERT_DEPT;
 16  
 17      PROCEDURE UPDATE_DEPT
 18     (
 19         V_DEPTNO DEPT.DEPTNO%TYPE,
 20         V_NEW DEPT.DNAME%TYPE
 21     )
 22     IS
 23         V_TEMP DEPT.DNAME%TYPE;
 24     BEGIN
 25         SELECT DNAME INTO V_TEMP FROM DEPT WHERE DEPTNO=V_DEPTNO;
 26         UPDATE DEPT
 27         SET DNAME=V_NEW
 28         WHERE DEPTNO=V_DEPTNO;
 29         DBMS_OUTPUT.PUT_LINE('修改成功');
 30     EXCEPTION
 31     WHEN NO_DATA_FOUND THEN
 32         DBMS_OUTPUT.PUT_LINE('部门号不存在！');
 33     END UPDATE_DEPT;
 34  
 35      FUNCTION DEPT_FUN(
 36          V_TEMP IN VARCHAR
 37      )
 38      RETURN BOOLEAN
 39      IS
 40      V_DEPTNO DEPT.DEPTNO%TYPE;
 41      BEGIN
 42          SELECT DEPTNO INTO V_DEPTNO
 43          FROM DEPT
 44         WHERE DEPTNO=V_TEMP;
 45         RETURN TRUE;
 46     EXCEPTION
 47         WHEN NO_DATA_FOUND THEN
 48             RETURN FALSE;
 49     END DEPT_FUN;
 50  
 51      PROCEDURE ADD_EMP
 52  (
 53      V_EMPNO IN EMP.EMPNO%TYPE,
 54      V_ENAME IN EMP.ENAME%TYPE,
 55      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 56      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 57      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 58      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 59      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 60      V_DEPTNO IN EMP.DEPTNO%TYPE
 61  )
 62  IS
 63      E_NO_DEPTNO EXCEPTION;
 64  BEGIN
 65      CASE
 66      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 67          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 68          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 69          DBMS_OUTPUT.PUT_LINE('插入成功');
 70      ELSE
 71          RAISE E_NO_DEPTNO;
 72      END CASE;
 73      EXCEPTION
 74      WHEN E_NO_DEPTNO THEN
 75          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 76  END;
 77  
 78  END EMP_DEPT_PACK;
 79  /

警告: 创建的包体带有编译错误。

SQL> SHOW ERROR;
PACKAGE BODY EMP_DEPT_PACK 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
0/0      PL/SQL: Compilation unit analysis terminated                                                                                                                                                                                                                                                       
1/14     PLS-00201: 必须声明标识符 'EMP_DEPT_PACK'                                                                                                                                                                                                                                                          
1/14     PLS-00304: 如果没有说明, 则无法编译 'EMP_DEPT_PACK' 主体                                                                                                                                                                                                                                           
SQL> CREATE OR REPLACE PACKAGE EMP_DEPT_PACK IS
  2  PROCEDURE INSERT_DEPT
  3     (
  4         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  5         V_DNAME IN DEPT.DNAME%TYPE
  6     );
  7  PROCEDURE UPDATE_DEPT
  8     (
  9         V_DEPTNO DEPT.DEPTNO%TYPE,
 10         V_NEW DEPT.DNAME%TYPE
 11     );
 12  FUNCTION DEPT_FUN(
 13          V_TEMP IN VARCHAR
 14      );
 15  PROCEDURE ADD_EMP
 16  (
 17      V_EMPNO IN EMP.EMPNO%TYPE,
 18      V_ENAME IN EMP.ENAME%TYPE,
 19      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 20      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 21      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 22      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 23      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 24      V_DEPTNO IN EMP.DEPTNO%TYPE
 25  );
 26  END EMP_DEPT_PACK ;
 27  /

警告: 创建的包带有编译错误。

SQL> SHOW ERROR;
PACKAGE EMP_DEPT_PACK 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
14/6     PLS-00103: 出现符号 ";"在需要下列之一时：                                                                                                                                                                                                                                                          
         return                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                            
26/1     PLS-00103: 出现符号 "END"在需要下列之一时：                                                                                                                                                                                                                                                        
         begin function pragma                                                                                                                                                                                                                                                                              
         procedure subtype type <an identifier>                                                                                                                                                                                                                                                             
         <a double-quoted delimited-identifier> current cursor delete                                                                                                                                                                                                                                       
         exists prior                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                            
SQL> CREATE OR REPLACE PACKAGE EMP_DEPT_PACK IS
  2  PROCEDURE INSERT_DEPT
  3     (
  4         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  5         V_DNAME IN DEPT.DNAME%TYPE
  6     );
  7  PROCEDURE UPDATE_DEPT
  8     (
  9         V_DEPTNO DEPT.DEPTNO%TYPE,
 10         V_NEW DEPT.DNAME%TYPE
 11     );
 12  FUNCTION DEPT_FUN(
 13          V_TEMP IN VARCHAR
 14      )
 15  RETURN BOOLEAN;
 16  PROCEDURE ADD_EMP
 17  (
 18      V_EMPNO IN EMP.EMPNO%TYPE,
 19      V_ENAME IN EMP.ENAME%TYPE,
 20      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 21      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 22      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 23      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 24      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 25      V_DEPTNO IN EMP.DEPTNO%TYPE
 26  );
 27  END EMP_DEPT_PACK;
 28  /

程序包已创建。

SQL> CREATE OR REPLACE PACKAGE BODY EMP_DEPT_PACK IS
  2  
  3      PROCEDURE INSERT_DEPT
  4     (
  5         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  6         V_DNAME IN DEPT.DNAME%TYPE
  7     )
  8     AS
  9     BEGIN
 10         INSERT INTO DEPT(DEPTNO,DNAME)
 11         VALUES(V_DEPTNO,V_DNAME);
 12    EXCEPTION
 13    WHEN DUP_VAL_ON_INDEX THEN
 14        DBMS_OUTPUT.PUT_LINE('部门号不可重复！');
 15    END INSERT_DEPT;
 16  
 17      PROCEDURE UPDATE_DEPT
 18     (
 19         V_DEPTNO DEPT.DEPTNO%TYPE,
 20         V_NEW DEPT.DNAME%TYPE
 21     )
 22     IS
 23         V_TEMP DEPT.DNAME%TYPE;
 24     BEGIN
 25         SELECT DNAME INTO V_TEMP FROM DEPT WHERE DEPTNO=V_DEPTNO;
 26         UPDATE DEPT
 27         SET DNAME=V_NEW
 28         WHERE DEPTNO=V_DEPTNO;
 29         DBMS_OUTPUT.PUT_LINE('修改成功');
 30     EXCEPTION
 31     WHEN NO_DATA_FOUND THEN
 32         DBMS_OUTPUT.PUT_LINE('部门号不存在！');
 33     END UPDATE_DEPT;
 34  
 35      FUNCTION DEPT_FUN(
 36          V_TEMP IN VARCHAR
 37      )
 38      RETURN BOOLEAN
 39      IS
 40      V_DEPTNO DEPT.DEPTNO%TYPE;
 41      BEGIN
 42          SELECT DEPTNO INTO V_DEPTNO
 43          FROM DEPT
 44         WHERE DEPTNO=V_TEMP;
 45         RETURN TRUE;
 46     EXCEPTION
 47         WHEN NO_DATA_FOUND THEN
 48             RETURN FALSE;
 49     END DEPT_FUN;
 50  
 51      PROCEDURE ADD_EMP
 52  (
 53      V_EMPNO IN EMP.EMPNO%TYPE,
 54      V_ENAME IN EMP.ENAME%TYPE,
 55      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 56      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 57      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 58      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 59      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 60      V_DEPTNO IN EMP.DEPTNO%TYPE
 61  )
 62  IS
 63      E_NO_DEPTNO EXCEPTION;
 64  BEGIN
 65      CASE
 66      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 67          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 68          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 69          DBMS_OUTPUT.PUT_LINE('插入成功');
 70      ELSE
 71          RAISE E_NO_DEPTNO;
 72      END CASE;
 73      EXCEPTION
 74      WHEN E_NO_DEPTNO THEN
 75          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 76  END;
 77  
 78  END EMP_DEPT_PACK;
 79  /

程序包体已创建。

SQL> VARIABLE DNO NUMBER
SQL> EXEC :DNO :=EMP_DEPT_PACK.DEPT_FUN(100)
BEGIN :DNO :=EMP_DEPT_PACK.DEPT_FUN(100); END;

             *
第 1 行出现错误: 
ORA-06550: 第 1 行, 第 14 列: 
PLS-00382: 表达式类型错误
ORA-06550: 第 1 行, 第 7 列: 
PL/SQL: Statement ignored 


SQL> CREATE OR REPLACE FUNCTION DEPT_FUN(
  2          V_TEMP IN VARCHAR
  3      )
  4      RETURN BOOLEAN
  5      IS
  6      V_DEPTNO DEPT.DEPTNO%TYPE;
  7      BEGIN
  8          SELECT DEPTNO INTO V_DEPTNO
  9          FROM DEPT
 10         WHERE DEPTNO=V_TEMP;
 11         RETURN TRUE;
 12     EXCEPTION
 13         WHEN NO_DATA_FOUND THEN
 14             RETURN FALSE;
 15     END DEPT_FUN;
 16  /

函数已创建。

SQL> BEGIN
  2       IF DEPT_FUN(100)=TRUE THEN
  3           DBMS_OUTPUT.PUT_LINE('部门存在');
  4       ELSE
  5           DBMS_OUTPUT.PUT_LINE('部门不存在');
  6       END IF;
  7   END;
  8  /
部门不存在                                                                                                                                                                                                                                                                                                  

PL/SQL 过程已成功完成。

SQL> CREATE OR REPLACE FUNCTION DEPT_FUN(
  2          V_TEMP IN NUMBER
  3      )
  4      RETURN BOOLEAN
  5      IS
  6      V_DEPTNO DEPT.DEPTNO%TYPE;
  7      BEGIN
  8          SELECT DEPTNO INTO V_DEPTNO
  9          FROM DEPT
 10         WHERE DEPTNO=V_TEMP;
 11         RETURN TRUE;
 12     EXCEPTION
 13         WHEN NO_DATA_FOUND THEN
 14             RETURN FALSE;
 15     END DEPT_FUN;
 16  /

函数已创建。

SQL> BEGIN
  2       IF DEPT_FUN(100)=TRUE THEN
  3           DBMS_OUTPUT.PUT_LINE('部门存在');
  4       ELSE
  5           DBMS_OUTPUT.PUT_LINE('部门不存在');
  6       END IF;
  7   END;
  8  /
部门不存在                                                                                                                                                                                                                                                                                                  

PL/SQL 过程已成功完成。

SQL> CREATE OR REPLACE PACKAGE BODY EMP_DEPT_PACK IS
  2  
  3      PROCEDURE INSERT_DEPT
  4     (
  5         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  6         V_DNAME IN DEPT.DNAME%TYPE
  7     )
  8     AS
  9     BEGIN
 10         INSERT INTO DEPT(DEPTNO,DNAME)
 11         VALUES(V_DEPTNO,V_DNAME);
 12    EXCEPTION
 13    WHEN DUP_VAL_ON_INDEX THEN
 14        DBMS_OUTPUT.PUT_LINE('部门号不可重复！');
 15    END INSERT_DEPT;
 16  
 17      PROCEDURE UPDATE_DEPT
 18     (
 19         V_DEPTNO DEPT.DEPTNO%TYPE,
 20         V_NEW DEPT.DNAME%TYPE
 21     )
 22     IS
 23         V_TEMP DEPT.DNAME%TYPE;
 24     BEGIN
 25         SELECT DNAME INTO V_TEMP FROM DEPT WHERE DEPTNO=V_DEPTNO;
 26         UPDATE DEPT
 27         SET DNAME=V_NEW
 28         WHERE DEPTNO=V_DEPTNO;
 29         DBMS_OUTPUT.PUT_LINE('修改成功');
 30     EXCEPTION
 31     WHEN NO_DATA_FOUND THEN
 32         DBMS_OUTPUT.PUT_LINE('部门号不存在！');
 33     END UPDATE_DEPT;
 34  
 35      FUNCTION DEPT_FUN(
 36          V_TEMP IN DEPT.DEPTNO%TYPE
 37      )
 38      RETURN BOOLEAN
 39      IS
 40      V_DEPTNO DEPT.DEPTNO%TYPE;
 41      BEGIN
 42          SELECT DEPTNO INTO V_DEPTNO
 43          FROM DEPT
 44         WHERE DEPTNO=V_TEMP;
 45         RETURN TRUE;
 46     EXCEPTION
 47         WHEN NO_DATA_FOUND THEN
 48             RETURN FALSE;
 49     END DEPT_FUN;
 50  
 51      PROCEDURE ADD_EMP
 52  (
 53      V_EMPNO IN EMP.EMPNO%TYPE,
 54      V_ENAME IN EMP.ENAME%TYPE,
 55      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 56      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 57      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 58      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 59      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 60      V_DEPTNO IN EMP.DEPTNO%TYPE
 61  )
 62  IS
 63      E_NO_DEPTNO EXCEPTION;
 64  BEGIN
 65      CASE
 66      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 67          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 68          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 69          DBMS_OUTPUT.PUT_LINE('插入成功');
 70      ELSE
 71          RAISE E_NO_DEPTNO;
 72      END CASE;
 73      EXCEPTION
 74      WHEN E_NO_DEPTNO THEN
 75          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 76  END;
 77  
 78  END EMP_DEPT_PACK;
 79  /

警告: 创建的包体带有编译错误。

SQL> SHOW ERROR
PACKAGE BODY EMP_DEPT_PACK 出现错误: 

LINE/COL ERROR                                                                                                                                                                                                                                                                                              
-------- -----------------------------------------------------------------                                                                                                                                                                                                                                  
12/10    PLS-00323: 子程序或游标 'DEPT_FUN' 已在程序包说明中声明,                                                                                                                                                                                                                                           
         必须在程序包体中对其进行定义。                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                            
SQL> CREATE OR REPLACE PACKAGE EMP_DEPT_PACK IS
  2  PROCEDURE INSERT_DEPT
  3     (
  4         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  5         V_DNAME IN DEPT.DNAME%TYPE
  6     );
  7  PROCEDURE UPDATE_DEPT
  8     (
  9         V_DEPTNO DEPT.DEPTNO%TYPE,
 10         V_NEW DEPT.DNAME%TYPE
 11     );
 12  FUNCTION DEPT_FUN(
 13          V_TEMP IN DEPT.DEPTNO%TYPE
 14      )
 15  RETURN BOOLEAN;
 16  PROCEDURE ADD_EMP
 17  (
 18      V_EMPNO IN EMP.EMPNO%TYPE,
 19      V_ENAME IN EMP.ENAME%TYPE,
 20      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 21      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 22      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 23      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 24      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 25      V_DEPTNO IN EMP.DEPTNO%TYPE
 26  );
 27  END EMP_DEPT_PACK;
 28  /

程序包已创建。

SQL> CREATE OR REPLACE PACKAGE BODY EMP_DEPT_PACK IS
  2  
  3      PROCEDURE INSERT_DEPT
  4     (
  5         V_DEPTNO IN DEPT.DEPTNO%TYPE,
  6         V_DNAME IN DEPT.DNAME%TYPE
  7     )
  8     AS
  9     BEGIN
 10         INSERT INTO DEPT(DEPTNO,DNAME)
 11         VALUES(V_DEPTNO,V_DNAME);
 12    EXCEPTION
 13    WHEN DUP_VAL_ON_INDEX THEN
 14        DBMS_OUTPUT.PUT_LINE('部门号不可重复！');
 15    END INSERT_DEPT;
 16  
 17      PROCEDURE UPDATE_DEPT
 18     (
 19         V_DEPTNO DEPT.DEPTNO%TYPE,
 20         V_NEW DEPT.DNAME%TYPE
 21     )
 22     IS
 23         V_TEMP DEPT.DNAME%TYPE;
 24     BEGIN
 25         SELECT DNAME INTO V_TEMP FROM DEPT WHERE DEPTNO=V_DEPTNO;
 26         UPDATE DEPT
 27         SET DNAME=V_NEW
 28         WHERE DEPTNO=V_DEPTNO;
 29         DBMS_OUTPUT.PUT_LINE('修改成功');
 30     EXCEPTION
 31     WHEN NO_DATA_FOUND THEN
 32         DBMS_OUTPUT.PUT_LINE('部门号不存在！');
 33     END UPDATE_DEPT;
 34  
 35      FUNCTION DEPT_FUN(
 36          V_TEMP IN DEPT.DEPTNO%TYPE
 37      )
 38      RETURN BOOLEAN
 39      IS
 40      V_DEPTNO DEPT.DEPTNO%TYPE;
 41      BEGIN
 42          SELECT DEPTNO INTO V_DEPTNO
 43          FROM DEPT
 44         WHERE DEPTNO=V_TEMP;
 45         RETURN TRUE;
 46     EXCEPTION
 47         WHEN NO_DATA_FOUND THEN
 48             RETURN FALSE;
 49     END DEPT_FUN;
 50  
 51      PROCEDURE ADD_EMP
 52  (
 53      V_EMPNO IN EMP.EMPNO%TYPE,
 54      V_ENAME IN EMP.ENAME%TYPE,
 55      V_JOB IN EMP.JOB%TYPE DEFAULT 'SALESMAN',
 56      V_MGR IN EMP.MGR%TYPE DEFAULT 7698,
 57      V_HIREDATE IN EMP.HIREDATE%TYPE DEFAULT '17-12月-80',
 58      V_SAL IN EMP.SAL%TYPE DEFAULT 1500,
 59      V_COMM IN EMP.COMM%TYPE DEFAULT 0,
 60      V_DEPTNO IN EMP.DEPTNO%TYPE
 61  )
 62  IS
 63      E_NO_DEPTNO EXCEPTION;
 64  BEGIN
 65      CASE
 66      WHEN DEPT_FUN(V_DEPTNO) =TRUE THEN
 67          INSERT INTO EMP (EMPNO,ENAME,DEPTNO)
 68          VALUES (V_EMPNO,V_ENAME,V_DEPTNO);
 69          DBMS_OUTPUT.PUT_LINE('插入成功');
 70      ELSE
 71          RAISE E_NO_DEPTNO;
 72      END CASE;
 73      EXCEPTION
 74      WHEN E_NO_DEPTNO THEN
 75          DBMS_OUTPUT.PUT_LINE('插入的部门号不存在');
 76  END;
 77  
 78  END EMP_DEPT_PACK;
 79  /

程序包体已创建。

SQL> VARIABLE DNO NUMBER
SQL> EXEC :DNO :=EMP_DEPT_PACK.DEPT_FUN(100)
BEGIN :DNO :=EMP_DEPT_PACK.DEPT_FUN(100); END;

             *
第 1 行出现错误: 
ORA-06550: 第 1 行, 第 14 列: 
PLS-00382: 表达式类型错误
ORA-06550: 第 1 行, 第 7 列: 
PL/SQL: Statement ignored 


SQL> SPOOL OFF
